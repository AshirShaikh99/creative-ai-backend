{
  "diagram_type": "software_architecture",
  "syntax": "Here's a serverless architecture diagram for a photo processing application with cloud functions, object storage, and a managed database:\n\n```json\n{\n    \"type\": \"software_architecture\",\n    \"title\": \"Photo Processing Serverless Architecture\",\n    \"nodes\": [\n        {\n            \"id\": \"frontend\",\n            \"label\": \"Frontend\",\n            \"type\": \"frontend\",\n            \"description\": \"Web interface for users to upload photos\",\n            \"technology\": \"HTML/CSS/JavaScript\"\n        },\n        {\n            \"id\": \"api-gw\",\n            \"label\": \"API Gateway\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Receives requests from the frontend, routes them to the appropriate cloud functions\",\n            \"technology\": \"API Gateway\"\n        },\n        {\n            \"id\": \"object-storage\",\n            \"label\": \"Object Storage\",\n            \"type\": \"data\",\n            \"description\": \"Stores original and processed photos\",\n            \"technology\": \"S3/GCS/etc.\"\n        },\n        {\n            \"id\": \"photo-resize\",\n            \"label\": \"Photo Resize Function\",\n            \"type\": \"backend\",\n            \"description\": \"Resizes uploaded photos and stores them in object storage\",\n            \"technology\": \"Cloud Function\"\n        },\n        {\n            \"id\": \"photo-process\",\n            \"label\": \"Photo Process Function\",\n            \"type\": \"backend\",\n            \"description\": \"Applies filters, effects or other transformations on photos before storing them in object storage\",\n            \"technology\": \"Cloud Function\"\n        },\n        {\n            \"id\": \"db\",\n            \"label\": \"Managed Database\",\n            \"type\": \"data\",\n            \"description\": \"Stores metadata for photos, users, and transformations\",\n            \"technology\": \"Cloud SQL/DynamoDB/etc.\"\n        },\n        {\n            \"id\": \"auth\",\n            \"label\": \"Authentication Service\",\n            \"type\": \"security\",\n            \"description\": \"Authentication and authorization for the frontend\",\n            \"technology\": \"OAuth/JWT/etc.\"\n        }\n    ],\n    \"connections\": [\n        {\n            \"from\": \"frontend\",\n            \"to\": \"api-gw\",\n            \"label\": \"API Calls\",\n            \"type\": \"http\",\n            \"protocol\": \"HTTP\"\n        },\n        {\n            \"from\": \"api-gw\",\n            \"to\": \"auth\",\n            \"label\": \"Authentication Flow\",\n            \"type\": \"auth\",\n            \"protocol\": \"OAuth/JWT/etc.\"\n        },\n        {\n            \"from\": \"api-gw\",\n            \"to\": \"photo-resize\",\n            \"label\": \"API Calls\",\n            \"type\": \"http\",\n            \"protocol\": \"HTTP\"\n        },\n        {\n            \"from\": \"api-gw\",\n            \"to\": \"photo-process\",\n            \"label\": \"API Calls\",\n            \"type\": \"http\",\n            \"protocol\": \"HTTP\"\n        },\n        {\n            \"from\": \"photo-resize\",\n            \"to\": \"object-storage\",\n            \"label\": \"Data Transformation\",\n            \"type\": \"data\",\n            \"protocol\": \"PUT\"\n        },\n        {\n            \"from\": \"photo-process\",\n            \"to\": \"object-storage\",\n            \"label\": \"Data Transformation\",\n            \"type\": \"data\",\n            \"protocol\": \"PUT\"\n        },\n        {\n            \"from\": \"api-gw\",\n            \"to\": \"db\",\n            \"label\": \"Database Queries\",\n            \"type\": \"database\",\n            \"protocol\": \"SQL\"\n        }\n    ],\n    \"clusters\": [\n        {\n            \"id\": \"frontend\",\n            \"label\": \"Frontend\",\n            \"nodes\": [\"frontend\"]\n        },\n        {\n            \"id\": \"backend\",\n            \"label\": \"Backend\",\n            \"nodes\": [\"photo-resize\", \"photo-process\"]\n        },\n        {\n            \"id\": \"data\",\n            \"label\": \"Data\",\n            \"nodes\": [\"object-storage\", \"db\"]\n        },\n        {\n            \"id\": \"infrastructure\",\n            \"label\": \"Infrastructure\",\n            \"nodes\": [\"api-gw\"]\n        },\n        {\n            \"id\": \"security\",\n            \"label\": \"Security\",\n            \"nodes\": [\"auth\"]\n        }\n    ],\n    \"styles\": {\n        \"frontend\": {\"color\": \"#4caf50\", \"shape\": \"ellipse\", \"border\": \"dashed\"},\n        \"backend\": {\"color\": \"#00bcd4\", \"shape\": \"rectangle\", \"border\": \"solid\"},\n        \"data\": {\"color\": \"#ffeb3b\", \"shape\": \"cylinder\", \"border\": \"double\"},\n        \"infrastructure\": {\"color\": \"#9e9e9e\", \"shape\": \"diamond\", \"border\": \"dotted\"},\n        \"security\": {\"color\": \"#f44336\", \"shape\": \"pentagon\", \"border\": \"dotdash\"}\n    }\n}\n```\n\nThis architecture includes:\n\n- Frontend: Web interface for users to upload photos.\n- API Gateway: Receives requests from the frontend, routes them to the appropriate cloud functions.\n- Object Storage: Stores original and processed photos.\n- Photo Resize Function: Resizes uploaded photos and stores them in object storage.\n- Photo Process Function: Applies filters, effects or other transformations on photos before storing them in object storage.\n- Managed Database: Stores metadata for photos, users, and transformations.\n- Authentication Service: Authentication and authorization for the frontend.\n\nThe architecture is organized into layers: frontend, backend, data, infrastructure, and security.",
  "description": "This diagram represents a serverless architecture for a photo processing application, featuring cloud functions for photo resizing and processing, object storage for photos, a managed database for metadata, an API gateway for request routing, and an authentication service for secure frontend access, organized into five layers: frontend, backend, data, infrastructure, and security.",
  "metadata": {
    "options": {},
    "model": "mixtral-8x7b-32768",
    "tokens": 1962
  },
  "raw_structure": null,
  "nodes": null,
  "connections": null,
  "clusters": null
}