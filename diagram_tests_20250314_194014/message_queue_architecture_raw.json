{
  "diagram_type": "software_architecture",
  "syntax": "Here's an example of a software architecture for a high-volume order processing system with message queues:\n\n```json\n{\n    \"type\": \"software_architecture\",\n    \"title\": \"Order Processing System Architecture\",\n    \"nodes\": [\n        {\n            \"id\": \"ui\",\n            \"label\": \"Frontend\",\n            \"type\": \"frontend\",\n            \"description\": \"User interface for customers to place orders.\",\n            \"technology\": \"React\"\n        },\n        {\n            \"id\": \"client\",\n            \"label\": \"Client Library\",\n            \"type\": \"frontend\",\n            \"description\": \"Library for communicating with the backend services.\",\n            \"technology\": \"JavaScript\"\n        },\n        {\n            \"id\": \"api-gateway\",\n            \"label\": \"API Gateway\",\n            \"type\": \"backend\",\n            \"description\": \"Entrypoint for all requests to the backend services.\",\n            \"technology\": \"Node.js\"\n        },\n        {\n            \"id\": \"order-service\",\n            \"label\": \"Order Service\",\n            \"type\": \"backend\",\n            \"description\": \"Manages orders and communicates with other services via message queues.\",\n            \"technology\": \"Java\"\n        },\n        {\n            \"id\": \"payment-service\",\n            \"label\": \"Payment Service\",\n            \"type\": \"backend\",\n            \"description\": \"Manages payments and communicates with other services via message queues.\",\n            \"technology\": \"Java\"\n        },\n        {\n            \"id\": \"inventory-service\",\n            \"label\": \"Inventory Service\",\n            \"type\": \"backend\",\n            \"description\": \"Manages inventory and communicates with other services via message queues.\",\n            \"technology\": \"Java\"\n        },\n        {\n            \"id\": \"message-queue\",\n            \"label\": \"Message Queue\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Handles asynchronous communication between services.\",\n            \"technology\": \"RabbitMQ\"\n        },\n        {\n            \"id\": \"db\",\n            \"label\": \"Database\",\n            \"type\": \"database\",\n            \"description\": \"Stores all data for the system.\",\n            \"technology\": \"PostgreSQL\"\n        }\n    ],\n    \"connections\": [\n        {\n            \"from\": \"ui\",\n            \"to\": \"api-gateway\",\n            \"label\": \"API Calls\",\n            \"type\": \"api\",\n            \"protocol\": \"HTTP\"\n        },\n        {\n            \"from\": \"client\",\n            \"to\": \"api-gateway\",\n            \"label\": \"API Calls\",\n            \"type\": \"api\",\n            \"protocol\": \"HTTP\"\n        },\n        {\n            \"from\": \"api-gateway\",\n            \"to\": \"order-service\",\n            \"label\": \"Message Queue\",\n            \"type\": \"message\",\n            \"protocol\": \"AMQP\"\n        },\n        {\n            \"from\": \"api-gateway\",\n            \"to\": \"payment-service\",\n            \"label\": \"Message Queue\",\n            \"type\": \"message\",\n            \"protocol\": \"AMQP\"\n        },\n        {\n            \"from\": \"api-gateway\",\n            \"to\": \"inventory-service\",\n            \"label\": \"Message Queue\",\n            \"type\": \"message\",\n            \"protocol\": \"AMQP\"\n        },\n        {\n            \"from\": \"order-service\",\n            \"to\": \"db\",\n            \"label\": \"Database Queries\",\n            \"type\": \"database\",\n            \"protocol\": \"SQL\"\n        },\n        {\n            \"from\": \"payment-service\",\n            \"to\": \"db\",\n            \"label\": \"Database Queries\",\n            \"type\": \"database\",\n            \"protocol\": \"SQL\"\n        },\n        {\n            \"from\": \"inventory-service\",\n            \"to\": \"db\",\n            \"label\": \"Database Queries\",\n            \"type\": \"database\",\n            \"protocol\": \"SQL\"\n        }\n    ],\n    \"clusters\": [\n        {\n            \"id\": \"frontend\",\n            \"label\": \"Frontend\",\n            \"nodes\": [\"ui\", \"client\"]\n        },\n        {\n            \"id\": \"backend\",\n            \"label\": \"Backend\",\n            \"nodes\": [\"api-gateway\", \"order-service\", \"payment-service\", \"inventory-service\"]\n        },\n        {\n            \"id\": \"data\",\n            \"label\": \"Data\",\n            \"nodes\": [\"db\"]\n        },\n        {\n            \"id\": \"infrastructure\",\n            \"label\": \"Infrastructure\",\n            \"nodes\": [\"message-queue\"]\n        }\n    ],\n    \"styles\": {\n        \"ui\": {\"color\": \"#1DA1F2\", \"shape\": \"ellipse\", \"border\": \"solid\"},\n        \"client\": {\"color\": \"#1DA1F2\", \"shape\": \"ellipse\", \"border\": \"solid\"},\n        \"api-gateway\": {\"color\": \"#F5A623\", \"shape\": \"ellipse\", \"border\": \"dashed\"},\n        \"order-service\": {\"color\": \"#F5A623\", \"shape\": \"ellipse\", \"border\": \"dashed\"},\n        \"payment-service\": {\"color\": \"#F5A623\", \"shape\": \"ellipse\", \"border\": \"dashed\"},\n        \"inventory-service\": {\"color\": \"#F5A623\", \"shape\": \"ellipse\", \"border\": \"dashed\"},\n        \"message-queue\": {\"color\": \"#7ACCF2\", \"shape\": \"hexagon\", \"border\": \"dotted\"},\n        \"db\": {\"color\": \"#51B02D\", \"shape\": \"rectangle\", \"border\": \"double\"}\n    }\n}\n```\n\nThis architecture includes a frontend, client library, API gateway, order service, payment service, inventory service, message queue, and database. The frontend and client library communicate with the API gateway via API calls, and the API gateway communicates with the services via message queues. The services then communicate with the database via database queries. The architecture is separated into clusters by frontend, backend, data, and infrastructure. The styles distinguish different types of components. The message queue is used to handle high volume of transactions.",
  "description": "This diagram represents a software architecture for a high-volume order processing system with a frontend, client library, API gateway, order, payment, and inventory services, a message queue for asynchronous communication, and a database for storing data, organized into clusters for frontend, backend, data, and infrastructure components, using HTTP, AMQP, and SQL protocols, and with distinct visual styles for different component types.",
  "metadata": {
    "options": {},
    "model": "mixtral-8x7b-32768",
    "tokens": 2071
  },
  "raw_structure": null,
  "nodes": null,
  "connections": null,
  "clusters": null
}