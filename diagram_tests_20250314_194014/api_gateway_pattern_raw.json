{
  "diagram_type": "software_architecture",
  "syntax": "Here's a software architecture diagram in JSON format for an API Gateway pattern with authentication, rate limiting, and service routing:\n\n```json\n{\n  \"type\": \"software_architecture\",\n  \"title\": \"API Gateway Pattern\",\n  \"nodes\": [\n    {\n      \"id\": \"api_gateway\",\n      \"label\": \"API Gateway\",\n      \"type\": \"backend\",\n      \"description\": \"Handles authentication, rate limiting, and service routing\",\n      \"technology\": \"ExpressJS/Nginx/Kong\"\n    },\n    {\n      \"id\": \"frontend\",\n      \"label\": \"Frontend\",\n      \"type\": \"frontend\",\n      \"description\": \"Web application or mobile app\",\n      \"technology\": \"React/Angular/Ionic\"\n    },\n    {\n      \"id\": \"user_service\",\n      \"label\": \"User Service\",\n      \"type\": \"microservice\",\n      \"description\": \"Manages user authentication and authorization\",\n      \"technology\": \"NodeJS/Python/Go\"\n    },\n    {\n      \"id\": \"product_service\",\n      \"label\": \"Product Service\",\n      \"type\": \"microservice\",\n      \"description\": \"Handles product data and business logic\",\n      \"technology\": \"NodeJS/Python/Go\"\n    },\n    {\n      \"id\": \"database\",\n      \"label\": \"Database\",\n      \"type\": \"database\",\n      \"description\": \"Stores user, product, and order data\",\n      \"technology\": \"PostgreSQL/MySQL/MongoDB\"\n    },\n    {\n      \"id\": \"redis\",\n      \"label\": \"Redis\",\n      \"type\": \"infrastructure\",\n      \"description\": \"Caching and rate limiting\",\n      \"technology\": \"Redis\"\n    },\n    {\n      \"id\": \"kafka\",\n      \"label\": \"Kafka\",\n      \"type\": \"infrastructure\",\n      \"description\": \"Event-driven architecture\",\n      \"technology\": \"Kafka\"\n    }\n  ],\n  \"connections\": [\n    {\n      \"from\": \"frontend\",\n      \"to\": \"api_gateway\",\n      \"label\": \"API calls\",\n      \"type\": \"api_call\",\n      \"protocol\": \"HTTP\"\n    },\n    {\n      \"from\": \"api_gateway\",\n      \"to\": \"user_service\",\n      \"label\": \"Service routing\",\n      \"type\": \"service_routing\",\n      \"protocol\": \"HTTP\"\n    },\n    {\n      \"from\": \"api_gateway\",\n      \"to\": \"product_service\",\n      \"label\": \"Service routing\",\n      \"type\": \"service_routing\",\n      \"protocol\": \"HTTP\"\n    },\n    {\n      \"from\": \"user_service\",\n      \"to\": \"database\",\n      \"label\": \"Database queries\",\n      \"type\": \"database_query\",\n      \"protocol\": \"PostgreSQL\"\n    },\n    {\n      \"from\": \"product_service\",\n      \"to\": \"database\",\n      \"label\": \"Database queries\",\n      \"type\": \"database_query\",\n      \"protocol\": \"PostgreSQL\"\n    },\n    {\n      \"from\": \"api_gateway\",\n      \"to\": \"redis\",\n      \"label\": \"Rate limiting\",\n      \"type\": \"rate_limiting\",\n      \"protocol\": \"Redis\"\n    },\n    {\n      \"from\": \"user_service\",\n      \"to\": \"kafka\",\n      \"label\": \"Event flows\",\n      \"type\": \"event_flow\",\n      \"protocol\": \"Kafka\"\n    }\n  ],\n  \"clusters\": [\n    {\n      \"id\": \"backend\",\n      \"label\": \"Backend\",\n      \"nodes\": [\"api_gateway\", \"user_service\", \"product_service\", \"database\", \"redis\", \"kafka\"]\n    },\n    {\n      \"id\": \"frontend\",\n      \"label\": \"Frontend\",\n      \"nodes\": [\"frontend\"]\n    }\n  ],\n  \"styles\": {\n    \"api_gateway\": {\n      \"color\": \"#008CBA\",\n      \"shape\": \"rectangle\",\n      \"border\": \"solid\"\n    },\n    \"frontend\": {\n      \"color\": \"#3F51B5\",\n      \"shape\": \"rectangle\",\n      \"border\":\n```",
  "description": "This diagram represents a software architecture for an API Gateway pattern, featuring a frontend, API Gateway, user and product services, a database, Redis for caching and rate limiting, and Kafka for event-driven architecture, with connections for API calls, service routing, database queries, rate limiting, and event flows.",
  "metadata": {
    "options": {},
    "model": "mixtral-8x7b-32768",
    "tokens": 1631
  },
  "raw_structure": null,
  "nodes": null,
  "connections": null,
  "clusters": null
}