{
  "diagram_type": "software_architecture",
  "syntax": "Here's a software architecture diagram in JSON format for an order processing system with message queues:\n\n```json\n{\n    \"type\": \"software_architecture\",\n    \"title\": \"Order Processing System Architecture\",\n    \"nodes\": [\n        {\n            \"id\": \"ui\",\n            \"label\": \"User Interface\",\n            \"type\": \"frontend\",\n            \"description\": \"Handles user interactions and displays the application's interface\",\n            \"technology\": \"React\"\n        },\n        {\n            \"id\": \"client-lib\",\n            \"label\": \"Client Library\",\n            \"type\": \"frontend\",\n            \"description\": \"Libraries for integrating with the order processing system\",\n            \"technology\": \"JavaScript\"\n        },\n        {\n            \"id\": \"api-gateway\",\n            \"label\": \"API Gateway\",\n            \"type\": \"backend\",\n            \"description\": \"Entrypoint to the order processing system, handles authentication and routing\",\n            \"technology\": \"Node.js\"\n        },\n        {\n            \"id\": \"order-service\",\n            \"label\": \"Order Service\",\n            \"type\": \"backend\",\n            \"description\": \"Manages order data, business logic, and transaction processing\",\n            \"technology\": \"Java\"\n        },\n        {\n            \"id\": \"payment-service\",\n            \"label\": \"Payment Service\",\n            \"type\": \"backend\",\n            \"description\": \"Integrates with payment gateways and processes payments\",\n            \"technology\": \"Go\"\n        },\n        {\n            \"id\": \"inventory-service\",\n            \"label\": \"Inventory Service\",\n            \"type\": \"backend\",\n            \"description\": \"Manages product inventory and stock levels\",\n            \"technology\": \"Python\"\n        },\n        {\n            \"id\": \"mq\",\n            \"label\": \"Message Queue\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Asynchronous message processing and event-driven architecture\",\n            \"technology\": \"RabbitMQ\"\n        },\n        {\n            \"id\": \"db\",\n            \"label\": \"Database\",\n            \"type\": \"data\",\n            \"description\": \"Stores and manages persistent data for the order processing system\",\n            \"technology\": \"PostgreSQL\"\n        },\n        {\n            \"id\": \"cache\",\n            \"label\": \"Cache\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Caches frequently accessed data for faster access\",\n            \"technology\": \"Redis\"\n        }\n    ],\n    \"connections\": [\n        {\n            \"from\": \"ui\",\n            \"to\": \"api-gateway\",\n            \"label\": \"API Call\",\n            \"type\": \"api\",\n            \"protocol\": \"HTTP\"\n        },\n        {\n            \"from\": \"client-lib\",\n            \"to\": \"api-gateway\",\n            \"label\": \"API Call\",\n            \"type\": \"api\",\n            \"protocol\": \"HTTP\"\n        },\n        {\n            \"from\": \"api-gateway\",\n            \"to\": \"order-service\",\n            \"label\": \"API Call\",\n            \"type\": \"api\",\n            \"protocol\": \"gRPC\"\n        },\n        {\n            \"from\": \"order-service\",\n            \"to\": \"payment-service\",\n            \"label\": \"Event Flow\",\n            \"type\": \"event\",\n            \"protocol\": \"AMQP\"\n        },\n        {\n            \"from\": \"payment-service\",\n            \"to\": \"order-service\",\n            \"label\": \"Event Flow\",\n            \"type\": \"event\",\n            \"protocol\": \"AMQP\"\n        },\n        {\n            \"from\": \"order-service\",\n            \"to\": \"inventory-service\",\n            \"label\": \"API Call\",\n            \"type\": \"api\",\n            \"protocol\": \"gRPC\"\n        },\n        {\n            \"from\": \"inventory-service\",\n            \"to\": \"mq\",\n            \"label\": \"Event Flow\",\n            \"type\": \"event\",\n            \"protocol\": \"AMQP\"\n        },\n        {\n            \"from\": \"mq\",\n            \"to\": \"order-service\",\n            \"label\": \"Event Flow\",\n            \"type\": \"event\",\n            \"protocol\": \"AMQP\"\n        },\n        {\n            \"from\": \"order-service\",\n            \"to\": \"db\",\n            \"label\": \"Database Query\",\n            \"type\": \"database\",\n            \"protocol\": \"SQL\"\n        },\n        {\n            \"from\": \"order-service\",\n            \"to\": \"cache\",\n            \"label\": \"Data Transformation\",\n            \"type\": \"cache\",\n            \"protocol\": \"Cache Update\"\n        }\n    ],\n    \"clusters\": [\n        {\n            \"id\": \"frontend\",\n            \"label\": \"Frontend Layer\",\n            \"nodes\": [\"ui\", \"client-lib\"]\n        },\n        {\n            \"id\": \"backend\",\n            \"label\": \"Backend Layer\",\n            \"nodes\": [\"api-gateway\", \"order-service\", \"payment-service\", \"inventory-service\"]\n        },\n        {\n            \"id\": \"data\",\n            \"label\": \"Data Layer\",\n            \"nodes\": [\"db\"]\n        },\n        {\n            \"id\": \"infrastructure\",\n            \"label\": \"Infrastructure Layer\",\n            \"nodes\": [\"mq\", \"cache\"]\n        }\n    ],\n    \"styles\": {\n        \"ui\": {\n            \"color\": \"#1572b6\",\n            \"shape\": \"circle\",\n            \"border\": \"none\"\n        },\n        \"client-lib\": {\n            \"color\": \"#333333\",\n            \"shape\": \"rectangle\",\n            \"border\": \"dotted\"\n        },\n        \"api-gateway\": {\n            \"color\": \"#009933\",\n            \"shape\": \"diamond\",\n            \"border\": \"solid\"\n        },\n        \"order-service\": {\n            \"color\": \"#cc3333\",\n            \"shape\": \"rectangle\",\n            \"border\": \"dashed\"\n        },\n        \"payment-service\": {\n            \"color\": \"#ffcc00\",\n            \"shape\": \"hexagon\",\n            \"border\": \"double\"\n        },\n        \"inventory-service\": {\n            \"color\": \"#999933\",\n            \"shape\": \"ellipse\",\n            \"border\": \"dotted\"\n        },\n        \"mq\": {\n            \"color\": \"#66ccff\",\n            \"shape\": \"triangle\",\n            \"border\": \"solid\"\n        },\n        \"db\": {\n            \"color\": \"#663399\",\n            \"shape\": \"cylinder\",\n            \"border\": \"double\"\n        },\n        \"cache\": {\n            \"color\": \"#ff9999\",\n            \"shape\": \"parallelogram\",\n            \"border\": \"dashed\"\n        }\n    }\n}\n```\n\nThis architecture features a layered design with microservices, an event-driven architecture, and message queues for handling high volume transactions. The order processing system includes a user interface, client libraries, an API gateway, and various backend services for managing orders, payments, and inventory. The system also has a message queue for asynchronous event processing and a database for persistent data storage. An in-memory cache is included for faster access to frequently accessed data.",
  "description": "This software architecture diagram depicts an order processing system with a layered design, incorporating microservices, an event-driven architecture, and message queues for high-volume transaction handling, featuring components such as a user interface, client libraries, API gateway, and backend services for managing orders, payments, and inventory, along with a message queue, database, and in-memory cache.",
  "metadata": {
    "options": {},
    "model": "mixtral-8x7b-32768",
    "tokens": 2340
  },
  "raw_structure": null,
  "nodes": null,
  "connections": null,
  "clusters": null
}