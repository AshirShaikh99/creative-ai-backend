{
  "diagram_type": "software_architecture",
  "syntax": "{\n    \"type\": \"software_architecture\",\n    \"title\": \"Insurance Claims Processing System Architecture\",\n    \"nodes\": [\n        {\n            \"id\": \"domain-core\",\n            \"label\": \"Domain Core\",\n            \"type\": \"domain\",\n            \"description\": \"Handles business logic and rules for insurance claims processing\",\n            \"technology\": \"Java, Kotlin, or C#\"\n        },\n        {\n            \"id\": \"application-services\",\n            \"label\": \"Application Services\",\n            \"type\": \"services\",\n            \"description\": \"Orchestrates the interaction between the domain core, adapters, and external services\",\n            \"technology\": \"Java, Kotlin, or C#\"\n        },\n        {\n            \"id\": \"ui-adapter\",\n            \"label\": \"UI Adapter\",\n            \"type\": \"adapter\",\n            \"description\": \"Communicates with the application services and renders the UI for users\",\n            \"technology\": \"React or Angular\"\n        },\n        {\n            \"id\": \"database-adapter\",\n            \"label\": \"Database Adapter\",\n            \"type\": \"adapter\",\n            \"description\": \"Manages data persistence and retrieval for the domain core\",\n            \"technology\": \"PostgreSQL, MySQL, or MongoDB\"\n        },\n        {\n            \"id\": \"external-service-adapter\",\n            \"label\": \"External Service Adapter\",\n            \"type\": \"adapter\",\n            \"description\": \"Integrates with external services for additional information and processing\",\n            \"technology\": \"REST APIs or gRPC\"\n        },\n        {\n            \"id\": \"message-queue\",\n            \"label\": \"Message Queue\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Handles event-driven communication between components\",\n            \"technology\": \"Apache Kafka or RabbitMQ\"\n        },\n        {\n            \"id\": \"api-gateway\",\n            \"label\": \"API Gateway\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Provides a single entry point for all external API calls\",\n            \"technology\": \"Kong, NGINX, or AWS API Gateway\"\n        },\n        {\n            \"id\": \"load-balancer\",\n            \"label\": \"Load Balancer\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Distributed incoming traffic across multiple instances of the UI and application services\",\n            \"technology\": \"HAProxy, NGINX, or AWS ELB\"\n        },\n        {\n            \"id\": \"cache\",\n            \"label\": \"Cache\",\n            \"type\": \"infrastructure\",\n            \"description\": \"Stores frequently accessed data for fast retrieval\",\n            \"technology\": \"Redis or Memcached\"\n        }\n    ],\n    \"connections\": [\n        {\n            \"from\": \"application-services\",\n            \"to\": \"domain-core\",\n            \"label\": \"Driven by use cases\",\n            \"type\": \"api-call\",\n            \"protocol\": \"gRPC\"\n        },\n        {\n            \"from\": \"database-adapter\",\n            \"to\": \"domain-core\",\n            \"label\": \"Stores and retrieves data\",\n            \"type\": \"database-query\",\n            \"protocol\": \"JDBC\"\n        },\n        {\n            \"from\": \"ui-adapter\",\n            \"to\": \"application-services\",\n            \"label\": \"Presents UI to users\",\n            \"type\": \"api-call\",\n            \"protocol\": \"HTTP/REST\"\n        },\n        {\n            \"from\": \"external-service-adapter\",\n            \"to\": \"application-services\",\n            \"label\": \"Integrates with external services\",\n            \"type\": \"api-call\",\n            \"protocol\": \"HTTP/REST\"\n        },\n        {\n            \"from\": \"message-queue\",\n            \"to\": \"external-service-adapter\",\n            \"label\": \"Event-driven integration\",\n            \"type\": \"event-flow\",\n            \"protocol\": \"Apache Kafka\"\n        },\n        {\n            \"from\": \"message-queue\",\n            \"to\": \"database-adapter\",\n            \"label\": \"Data synchronization\",\n            \"type\": \"event-flow\",\n            \"protocol\": \"Apache Kafka\"\n        },\n        {\n            \"from\": \"api-gateway\",\n            \"to\": \"ui-adapter\",\n            \"label\": \"Single entry point for UIs\",\n            \"type\": \"api-call\",\n            \"protocol\": \"HTTP/REST\"\n        },\n        {\n            \"from\": \"load-balancer\",\n            \"to\": \"ui-adapter\",\n            \"label\": \"Distributes UI traffic\",\n            \"type\": \"load-balancing\",\n            \"protocol\": \"HTTP/REST\"\n        },\n        {\n            \"from\": \"load-balancer\",\n            \"to\": \"application-services\",\n            \"label\": \"Distributes application traffic\",\n            \"type\": \"load-balancing\",\n            \"protocol\": \"HTTP/REST\"\n        },\n        {\n            \"from\": \"cache\",\n            \"to\": \"database-adapter\",\n            \"label\": \"Fast data retrieval\",\n            \"type\": \"data-transformation\",\n            \"protocol\": \"Cache-aside\"\n        }\n    ],\n    \"clusters\": [\n        {\n            \"id\": \"frontend\",\n            \"label\": \"Frontend\",\n            \"nodes\": [\"ui-adapter\"]\n        },\n        {\n            \"id\": \"backend\",\n            \"label\": \"Backend\",\n            \"nodes\": [\n                \"application-services\",\n                \"domain-core\",\n                \"database-adapter\",\n                \"external-service-adapter\"\n            ]\n        },\n        {\n            \"id\": \"data\",\n            \"label\": \"Data\",\n            \"nodes\": [\"database-adapter\", \"message-queue\", \"cache\"]\n        },\n        {\n            \"id\": \"infrastructure\",\n            \"label\": \"Infrastructure\",\n            \"nodes\": [\"message-queue\", \"api-gateway\", \"load-balancer\", \"cache\"]\n        }\n    ],\n    \"styles\": {\n        \"domain-core\": {\"color\": \"#3F51B5\", \"shape\": \"polygon\", \"border\": \"dashed\"},\n        \"application-services\": {\"color\": \"#FFC107\", \"shape\": \"box\", \"border\": \"solid\"},\n        \"ui-adapter\": {\"color\": \"#4CAF50\", \"shape\": \"roundrectangle\", \"border\": \"solid\"},\n        \"database-adapter\": {\"color\": \"#2196F3\", \"shape\": \"cylinder\", \"border\": \"solid\"},\n        \"external-service-adapter\": {\"color\": \"#9C27B0\", \"shape\": \"ellipse\", \"border\": \"solid\"},\n        \"message-queue\": {\"color\": \"#00BCD4\", \"shape\": \"parallelogram\", \"border\": \"solid\"},\n        \"api-gateway\": {\"color\": \"#009688\", \"shape\": \"diamond\", \"border\": \"solid\"},\n        \"load-balancer\": {\"color\": \"#607D8B\", \"shape\": \"trapezoid\", \"border\": \"solid\"},\n        \"cache\": {\"color\": \"#FF5722\", \"shape\": \"rhombus\", \"border\": \"solid\"}\n    }\n}",
  "description": "This diagram illustrates an Insurance Claims Processing System Architecture, featuring a domain core handling business logic, application services orchestrating interactions, UI and database adapters, external service integration, event-driven communication, a single entry point, distributed traffic management, and data caching, all built with various technologies such as Java, React, PostgreSQL, and Kong.",
  "metadata": {
    "options": {},
    "model": "mixtral-8x7b-32768",
    "tokens": 2348
  },
  "raw_structure": null,
  "nodes": null,
  "connections": null,
  "clusters": null
}